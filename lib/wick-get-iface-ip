#!/usr/bin/env bash
# Public: Determines the IP address associated with a given network interface.
# If no interface is provided, this returns the first IP address listed by
# `ifconfig`.
#
# $1 - Name of the variable that should receive the result.
# $2 - Optional, network interface name.  If not specified, defaults to the
#      first one returned by `ifconfig`.
#
# Examples
#
#   local ip
#
#   if ! wickGetIfaceIp ip tun0; then
#       echo "Tunnel is not yet established"
#       exit 1
#   fi
#
#   echo "Tunnel IP:  $ip"
#
# Returns 0 on success, non-zero on failure.
wickGetIfaceIp() {
    local allInterfaces interface list target

    wickGetArgument target 0 "$@"
    wickGetArgument interface 1 "$@"

    list=()
    allInterfaces=false

    if [[ "$interface" == "*" ]]; then
        interface=""
        allInterfaces=true
    fi

    if wickCommandExists ip; then
        cmd=(ip addr show)

        if [[ -n "$interface" ]]; then
            cmd[${#cmd[@]}]="$interface"
        fi

        list=( $("${cmd[@]}" 2>/dev/null | grep -oe "inet [0-9.]\+" | grep -oe "[0-9\.]\+") )
    elif wickCommandExists ifconfig; then
        cmd=(ifconfig -v)

        if [[ -n "$interface" ]]; then
            cmd[${#cmd[@]}]="$interface"
        fi

        list=( $("${cmd[@]}" 2>/dev/null | grep -oe "inet\s\+[addr:]*[0-9\.]\+" | grep -oe "[0-9\.]\+") )
    else
        wickError "Couldn't find a command to look up ip addresses"

        return 2
    fi

    if [[ "$allInterfaces" == true ]]; then
        if [[ ${#list[@]} -eq 0 ]]; then
            local "$target" && wickIndirectArray "$target"

            return 0
        fi

        local "$1" && wickIndirectArray "$1" "${list[@]}"

        return 0
    fi

    if [[ ${list[@]} -lt 1 ]]; then

        return 1
    fi

    local "$target" && wickIndirect "$target" "${list[0]}"
}

