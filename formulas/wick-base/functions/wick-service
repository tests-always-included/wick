#!/usr/bin/env bash
# Public: Control services.  Add services, enable and disable them at boot up.
# Start, stop, reload, restart services.  Helps with the creation of override
# files (for `chkconfig`).
#
# $1 - Action to perform, detailed below.
# $2 - Service name.
#
# Examples
#
#   # Creating a new service using the formula's files/consul.init
#   # and copying it to the right spot.
#   wickService add consul consul.init
#   wickService enable consul
#   wickService start consul
#
#   # Make Apache require Consul before starting
#   wickService add-dependency apache2 consul
#
# Returns nothing.
#
#
# ### `add [--force] [--*] SERVICE FORMULA_FILE`
#
# Use `wickMakeFile` to copy the formula file to `/etc/init.d/` for the named
# service.  Does not enable nor start the service.  Does not add the service if
# the file already exists unless `--force` is also used.  You can also use any
# additional options that `wickMakeFile` supports.
#
# ### `add-dependency <service> <dependency>`
#
# Makes the service provided depend on the service passed as the dependency.
#
#
# ### `disable SERVICE`
#
# Disable the service from starting at boot.  Does not stop the service if it
# is already running.
#
#
# ### `enable SERVICE`
#
# Enable the service at boot.  Does not start the service.
#
#
# ### `force-state SERVICE STATE`
#
# Used by other scripts to force the service to be running or stopped.
#
# SERVICE - Name of service to manage.
# STATE - If empty, the service is stopped.  If not empty the service is
#         restarted (ensuring it is running properly).
#
#
# ### `override SERVICE`
#
# Calls `chkconfig override` to apply any changes made to override files.
#
#
# ### `reload SERVICE`
#
# Reloads the given service.
#
#
# ### `restart SERVICE`
#
# Stops and starts the given service.
#
#
# ### `start SERVICE`
#
# Starts the service.
#
#
# ### `stop SERVICE`
#
# Stops the service.
#
wickService() {
    local action options unparsed

    wickGetOptions options "$@"
    wickGetArgument action 0 "$@"
    wickGetArguments unparsed "$@"

    if [[ ${#unparsed[@]} -lt 1 ]]; then
        wickError "Specify action to take and the service name to act upon."
        return 1
    fi

    if [[ ${#unparsed[@]} -lt 2 ]]; then
        wickError "Must specify service name to act upon"
        return 1
    fi

    # Remove the action from the unparsed items
    unparsed=("${unparsed[@]:1}")

    case "$action" in
        add)
            wickServiceAdd "${unparsed[@]}" "${options[@]-}"
            ;;

        add-dependency)
            wickServiceAddDependency "${unparsed[@]}" "${options[@]-}"
            ;;

        conditional-restart)
            wickServiceConditionalRestart "${unparsed[@]}" "${options[@]-}"
            ;;

        disable)
            wickServiceDisable "${unparsed[@]}" "${options[@]-}"
            ;;

        enable)
            wickServiceEnable "${unparsed[@]}" "${options[@]-}"
            ;;

        force-state)
            wickServiceForceState "${unparsed[@]}" "${options[@]-}"
            ;;

        is-running)
            wickServiceIsRunning "${unparsed[@]}" "${options[@]-}"
            ;;

        override)
            wickServiceOverride "${unparsed[@]}" "${options[@]-}"
            ;;

        reload)
            wickServiceReload "${unparsed[@]}" "${options[@]-}"
            ;;

        restart)
            wickServiceRestart "${unparsed[@]}" "${options[@]-}"
            ;;

        start)
            wickServiceStart "${unparsed[@]}" "${options[@]-}"
            ;;

        stop)
            wickServiceStop "${unparsed[@]}" "${options[@]-}"
            ;;

        *)
            wickError "Unknown service command: $action"
            wickError "Must be one of: add, add-dependency, disable, enable, override, reload, restart, start, stop"
            return 1
            ;;
    esac
}
